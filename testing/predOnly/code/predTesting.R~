### Title:    Test MIBEN/MIBL Prediction
### Author:   Kyle M. Lang
### Created:  2014-DEC-07
### Modified: 2016-MAY-15

rm(list = ls(all = TRUE))

outDir <- "../output/"

library(mice)
library(mitools)
library(mvtnorm)
library(mibrr)
library(parallel)

## Test BEN and BL:
alpha  <- 0.5
nPreds <- 10
nReps  <- 500

condMat <- expand.grid(center = c(TRUE, FALSE), scale = c(TRUE, FALSE))

outMeans <- matrix(NA, 4, 3)
outSds <- matrix(NA, 4, 3)

for(i in 1 : nrow(condMat)) {
    print(paste0("Doing condition set ", i))
    print(" ")
    
    parms <- list()
    parms$nObs <- 100
    parms$nPreds <- nPreds
    parms$r2 <- 0.5
    parms$collin <- 0.3
    parms$beta <- matrix(
        c(alpha, runif(nPreds / 2, 0.3, 0.6), rep(0, nPreds / 2))
    )
                                        #parms$beta <- matrix(c(alpha, runif(nPreds, 0.3, 0.6)))
    parms$means <- runif(nPreds, 0, 1)
    parms$scales <- rep(1, nPreds)
    parms$center <- condMat[i, "center"]
    parms$scale <- condMat[i, "scale"]
    parms$useClassic <- FALSE
    parms$simpleInt <- FALSE
    parms$verbose <- FALSE
    parms$postN <- 1000
    parms$approxIters <- 200
    parms$approxN <- 100
    parms$tuneIters <- 20
    parms$tuneN <- 250

    mseList <- mclapply(c(1 : nReps),
                        FUN = testFun,
                        parms = parms,
                        mc.cores = 4)
    
    mseMat <- do.call(rbind, mseList)
    outMeans[i, ] <- colMeans(mseMat)
    outSds[i, ] <- apply(mseMat, 2, sd)
}

outList <- list(
    mean = cbind(condMat, outMeans),
    sd =  cbind(condMat, outSds)
)

saveRDS(outList,
        file = paste0(outDir, "sparse_10pred_outList1.rds")
        )

##> cbind(condMat, outMeans)
##  center scale        1        2        3
##1   TRUE  TRUE 30.30673 31.31431 23.86253
##2  FALSE  TRUE 28.82615 29.18330 22.49048
##3   TRUE FALSE 39.95802 39.04987 30.71749
##4  FALSE FALSE 29.02999 28.63054 22.85032
##> cbind(condMat, outSds)
##  center scale        1        2        3
##1   TRUE  TRUE 12.10952 15.52743 4.647798
##2  FALSE  TRUE 11.49169 12.17685 4.394110
##3   TRUE FALSE 17.08081 18.00464 6.517262
##4  FALSE FALSE 11.52794 11.17665 4.767104

testFun <- function(rp, parms) {
    print(paste0("Doing replication ", rp))
    
    nObs   <- parms$nObs
    nPreds <- parms$nPreds
    r2     <- parms$r2
    collin <- parms$collin
    beta   <- parms$beta
    means  <- parms$means
    scales <- parms$scales

    dat1 <- simulateData(nObs   = nObs,
                         nPreds = nPreds,
                         r2     = r2,
                         collin = collin,
                         beta   = beta,
                         means  = means,
                         scales = scales)
    
    testOut <- ben(rawData         = dat1,
                   y               = "y",
                   X               = paste0("x", c(1 : nPreds)),
                   mcemApproxIters = parms$approxIters,
                   mcemApproxN     = parms$approxN,
                   mcemTuneIters   = parms$tuneIters,
                   mcemTuneN       = parms$tuneN,
                   mcemPostN       = parms$postN,
                   verbose         = parms$verbose,
                   control         =
                       list(center          = parms$center,
                            scale           = parms$scale,
                            adaptScales     = FALSE,
                            regIntercept    = FALSE,
                            useClassic      = parms$useClassic,
                            simpleIntercept = parms$simpleInt)
                   )
    
    testOut2 <- bl(rawData         = dat1,
                   y               = "y",
                   X               = paste0("x", c(1 : nPreds)),
                   mcemApproxIters = parms$approxIters,
                   mcemApproxN     = parms$approxN,
                   mcemTuneIters   = parms$tuneIters,
                   mcemTuneN       = parms$tuneN,
                   mcemPostN       = parms$postN,
                   verbose         = parms$verbose,
                   control         =
                       list(center          = parms$center,
                            scale           = parms$scale,
                            adaptScales     = FALSE,
                            regIntercept    = FALSE,
                            useClassic      = parms$useClassic,
                            simpleIntercept = parms$simpleInt)
                   )

    testForm <-
        as.formula(paste0("y ~ ", paste0("x", c(1 : nPreds), collapse = " + ")))
    lmOut <- lm(testForm, data = dat1)
    
    testDat <- simulateData(nObs   = nObs,
                            nPreds = nPreds,
                            r2     = r2,
                            collin = collin,
                            beta   = beta,
                            means  = means,
                            scales = scales)
    
    
    predOut1 <- predictMibrr(object  = testOut,
                             newData = as.matrix(testDat[ , -1])
                             )
    
    predOut2 <- predictMibrr(object  = testOut2,
                             newData = as.matrix(testDat[ , -1])
                             )
    
    predOut3 <- predict(lmOut, newdata = testDat[ , -1])
    
    mseVec <- c(
        mean((predOut1 - dat1$y)^2),
        mean((predOut2 - dat1$y)^2),
        mean((predOut3 - dat1$y)^2)
    )
    names(mseVec) <- c("ben", "bl", "mlr")
    mseVec
}# END testFun()
