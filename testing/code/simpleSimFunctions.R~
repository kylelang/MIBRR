

cleanData <- function(parms) {
    dat1 <- readRDS(paste0(parms$dataDir, "adamsKlpsData.rds"))
    
    sysRacNames <- paste0("NORI", c(2, 3, 6, 7, 8, 9, 11))
    sysRacNames <- sysRacNames[sysRacNames %in% colnames(dat1)]
    
    indRacNames <- paste0("NORI", c(1, 4, 5, 10))
    indRacNames <- indRacNames[indRacNames %in% colnames(dat1)]
    
    policyNames <- paste0("POLICY", c(1, 3, 4, 5, 6))
    
    meritNames <- paste0("WPRIV", c(1 : 10))
    meritNames <- meritNames[meritNames %in% colnames(dat1)]

    data.frame(
        sysRac = rowMeans(dat1[ , sysRacNames], na.rm = TRUE),
        indRacData = rowMeans(dat1[ , indRacNames], na.rm = TRUE),
        policyData = rowMeans(dat1[ , policyNames], na.rm = TRUE),
        meritData = rowMeans(dat1[ , meritNames], na.rm = TRUE)
    )
}


simSimpleData <- function(nObs, r2, alpha, beta, collinVal) {
    sigma <- matrix(collinVal, 3, 3)
    diag(sigma) <- 1.0
    
    X <- rmvnorm(nObs, parms$predMeans, sigma)
    eta <- X %*% beta
    errorVar <- (var(eta) / r2) - var(eta)
    y <- alpha + eta + rnorm(nObs, 0, sqrt(errorVar))
    outData <- data.frame(y, X)
    colnames(outData) <- c("y", "x1", "x2", "z")
    outData
}


simData2 <- function(nObs, r2, alpha, beta, collinVal) {
    sigma <- matrix(collinVal, 3, 3)
    diag(sigma) <- 1.0
    
    X <- rmvnorm(nObs, rep(0, 3), sigma)
    eta <- X[ , -3] %*% beta
    errorVar <- (var(eta) / r2) - var(eta)
    y <- alpha + eta + rnorm(nObs, 0, sqrt(errorVar))
    outData <- data.frame(y, X)
    colnames(outData) <- c("y", "x1", "x2", "z")
    outData
}


simData3 <- function(nObs, collinVal) {
    sigma <- matrix(collinVal, 4, 4)
    diag(sigma) <- 1.0
    outData <- rmvnorm(nObs, rep(0.5, 4), sigma)
    colnames(outData) <- c("y", "x1", "x2", "z")
    outData
}


imposeMissing <- function(compData, pm, auxVar) {
    tmp <- pnorm(compData[ , auxVar],
                 mean = mean(compData[ , auxVar]),
                 sd = sd(compData[ , auxVar])
                 )
    
    missFlagLo <- tmp < pm
    missFlagHi <- tmp > (1 - pm)

    compData[missFlagLo, "y"] <- NA
    compData[missFlagHi, "x2"] <- NA
    compData
}

colMeans(dat1)
mean(predict(lm(y ~ x1 + x2 + z, data = dat1)))

coef(lm(y ~ x1 + x2 + z, data = dat1))

doRep <- function(rp, parms) {
    cat(paste0("Doing replication ", rp, "\n"))
    
    dat1 <- simSimpleData(nObs      = parms$nObs,
                          r2        = parms$r2,
                          alpha     = parms$alpha,
                          beta      = parms$beta,
                          collinVal = parms$collinVal)
    
    compResult <- lm(y ~ x1 + x2, data = dat1)
    
    missData <- imposeMissing(compData = dat1,
                              pm       = parms$pm,
                              auxVar   = parms$auxVar)

    suppressWarnings(
        mibenOut <- miben(rawData         = missData,
                          targetVariables = c("y", "x2"),
                          verboseIters    = FALSE,
                          verboseErrors   = FALSE)
    )
    
    fitList <- lapply(mibenOut$imps, FUN = function(x) lm(y ~ x1 + x2, data = x))
    mibenResult <- MIcombine(fitList)
    
    miceOut <- mice(data = missData,
                    m = 100,
                    maxit = 5,
                    printFlag = FALSE)
    
    impList <- list()
    for(m in 1 : 100) impList[[m]] <- complete(miceOut, m)
    
    fitList <- lapply(impList, FUN = function(x) lm(y ~ x1 + x2, data = x))
    miceResult <- MIcombine(fitList)
    
    list(comp = compResult, miben = mibenResult, mice = miceResult)
}
