\name{bvr}
\alias{bvr}
\title{
Bayesian Vanilla Regression
}
\description{
  This function will fit a basic Bayesian linear regression model to (possibly) incomplete data.
}
\usage{
bvr(data,
    y,
    X           = NULL,
    sampleSizes = rep(500, 2),
    missCode    = NA,
    ridge       = 1e-4,
    verbose     = TRUE,
    seed        = NULL,
    userRng     = "",
    control     = list()
    )  
}
\arguments{
  \item{data}{
    A, possibly incomplete, numeric data matrix or data frame to which the BL
    is to be fit.
  }
  \item{y}{
    The column label for the outcome variable.  
  }
  \item{X}{
    An optional character vector giving the column labels for the predictor
    variables. When \code{X = NULL} the target variable is regressed onto all
    other variables in \code{data}.
  }
  \item{sampleSizes}{
    A two-element numeric vector giving the desired Gibbs sample sizes (see
    Details for more information).\cr 
    Defaults to \code{sampleSizes = rep(500, 2)}. 
  }
  \item{missCode}{
    An optional integer-valued code used to flag the missing data in
    \code{data}. Should take a value that cannot naturally occur in
    \code{data}. Not needed when the missing data are coded as \code{NA}.
  }
  \item{ridge}{
    The ridge penalty to apply to the crossproducts matrix of the
    model's predictor matrices.\cr 
    Defaults to \code{ridge = 1e-4}.
  }
  \item{verbose}{
    A logical switch: Should verbose output be printed to stdout?\cr
    Defaults to \code{verbose = TRUE}.
  }
  \item{seed}{
    Either a positive, integer-valued seed a one-element character
    vector naming an extant R'Lecuyer RNG stream generated by the
    \pkg{rlecuyer} package (see \dQuote{Details}).
  }
  \item{userRng}{
    A character string giving the name of an \pkg{rlecuyer} RNG stream
    that is being actively used for random number generation in the
    current session. See \dQuote{Details} for more information about how
    this argument is used.
  }
  \item{control}{
    A list of control parameters for the Gibbs sampler and penalty parameter
    optimization (see Details for more information).
  }
}
\details{
  The\code{sampleSizes} argument must be a two-element numeric
  (integer) vector giving the number of MCMC draws to discard as
  burn-in and the number to retain in the final Gibbs sample.

  The \pkg{MIBRR} package uses \pkg{rlecuyer} to generate independent
  random number streams for all internal sub-processes. When the argument
  to \code{seed} is an integer, this value is used to seed the
  \pkg{rlecuyer} package via
  \code{rlecuyer::.lec.SetPackageSeed(rep(seed, 6))}. When the argument
  to \code{seed} names an extant \pkg{rlecuyer} stream, the internal RNG
  streams are seeded with the current state of the stream named in
  \code{seed} via
  \code{rlecuyer::.lec.SetPackageSeed(rlecuyer::.lec.GetState(seed))}. When
  \code{seed = NULL}, a transient seed is generated via \code{seed <-
  round(runif(1) * 1e8)}. The value used to seed the \pkg{rlecuyer}
  package (along with its name, if any) is saved in the \code{seed}
  field of the \code{MibrrFit} object.

  The \pkg{MIBRR} package uses \pkg{rlecuyer} random number streams
  internally. So, if an \pkg{rlecuyer} RNG stream, say \dQuote{s0}, is
  being used to generate random numbers in the current session, this
  stream's name should be given as the \code{userRng} argument. For
  example, if \code{.lec.CurrentStream("s0")} has been called and
  \code{.lec.CurrentStreamEnd()} has not been called, \code{bl} needs
  to be overtly notified of the non-standard RNG state via \code{userRng
  = "s0"}. Doing so will tell \code{bl} to re-set \dQuote{s0} as the
  active RNG stream on return. If no argument is provided for
  \code{userRng}, \code{bl} will attempt to leave the RNG state as it
  was when \code{bl} was called, but no \pkg{rlecuyer} RNG streams
  will not be re-set for use in the current session.
  
  \code{control} is a list containing the following named elements:
  \describe{
    \item{convThresh:}{
      The R-Hat value used to judge convergence. R-Hat values <
      \code{convThresh} arising from the final, retained Gibbs sample
      will trigger a warning.\cr
      Defaults to \code{convThres = 1.1}.
    }
    \item{minPredCor:}{
      The minimum correlation used by \code{mice::quickpred}
      when temporarily filling missing data before scaling or when filling
      missing data on covariates.\cr
      Defaults to \code{minPredCor = 0.3}.
    }
    \item{miceIters:}{
      The number of iterations used by the \pkg{mice} package when temporarily
      filling missing data before scaling or filling missing data on
      covariates.\cr
      Defaults to \code{miceIters = 10}.
    }
    \item{miceRidge:}{
      The ridge penalty used by the \pkg{mice} package when temporarily
      filling missing data before scaling or filling missing data on
      covariates.\cr
      Defaults to \code{miceRidge = 1e-4}.
    }
    \item{miceMethod:}{
      The elementary imputation method used by the \pkg{mice} package when
      temporarily filling missing data before scaling or filling missing data on
      covariates.\cr
      Defaults to \code{miceMethod = "pmm"}.
    }
    \item{checkConv:}{
      A logical switch: Should the stationary Gibbs samples be checked
      for convergence?\cr
      Defaults to \code{checkConv = TRUE}.
    }
  }
}
\value{
  A reference class object with class \code{MibrrFit}. This object
  contains a great deal of metadata and various pieces of output. Key
  output can be accessed via the convenience function
  \code{\link{getParams}}, and the \code{\link{getField}} function. See
  documentation for \code{\link{MibrrFit}} for more details.
}
\author{
  Kyle M. Lang
}
\section{Warning}{
  This function is in a highly unstable \emph{alpha} level of development. Please
  anticipate frequent---and dramatic---changes to the functionality and user
  interface.
  
  You have been granted access to this package for evaluation purposes, only. This
  function is \strong{absolutely not} ready for use in real-world analyses!
}
\seealso{
\code{\link{ben}}, \code{\link{bl}}, \code{\link{getParams}}, \code{\link{getField}}
}
\examples{
data(mibrrExampleData)

bvrOut <- bvr(data        = mibrrExampleData,
              y           = "y",
              X           = setdiff(colnames(mibrrExampleData), c("y", "idNum")),
              sampleSizes = c(500, 500)
              )
}